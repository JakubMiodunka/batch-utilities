@echo off

rem Defining constants.
set "VERSION=3"

rem Script entry point.
call :main "%~1" "%~2"
goto :end

rem Defining subroutines.
:get_iso_date
setlocal

set "WMIC_TIMESTAMP=%~1"

set "YEAR=%WMIC_TIMESTAMP:~0,4%"
set "MONTH=%WMIC_TIMESTAMP:~4,2%"
set "DAY=%WMIC_TIMESTAMP:~6,2%"

set "ISO_DATE=%YEAR%-%MONTH%-%DAY%"

endlocal && set "%~2=%ISO_DATE%"
goto :eof

:get_iso_time
setlocal

set "WMIC_TIMESTAMP=%~1"

set "HOUR=%WMIC_TIMESTAMP:~8,2%"
set "MINUTE=%WMIC_TIMESTAMP:~10,2%"
set "SECOND=%WMIC_TIMESTAMP:~12,2%"

set "ISO_TIME=%HOUR%:%MINUTE%:%SECOND%"

endlocal && set "%~2=%ISO_TIME%"
goto :eof

:get_iso_utc_offset
setlocal

set "WMIC_TIMESTAMP=%~1"

set "UTC_OFFSET_SIGN=%WMIC_TIMESTAMP:~21,1%"
set "RAW_UTC_OFFSET=%WMIC_TIMESTAMP:~22,3%"

rem UTC offset is provided by wmic in minutes - conversion to HH:mm format is required.
set /a UTC_OFFSET_HOURS=(1000%RAW_UTC_OFFSET% %% 1000) / 60
set "UTC_OFFSET_HOURS=0%UTC_OFFSET_HOURS%"
set "UTC_OFFSET_HOURS=%UTC_OFFSET_HOURS:~-2%"

set /a UTC_OFFSET_MINUTES=(1000%RAW_UTC_OFFSET% %% 1000) %% 60
set "UTC_OFFSET_MINUTES=0%UTC_OFFSET_MINUTES%"
set "UTC_OFFSET_MINUTES=%UTC_OFFSET_MINUTES:~-2%"

set "ISO_UTC_OFFSET=%UTC_OFFSET_SIGN%%UTC_OFFSET_HOURS%:%UTC_OFFSET_MINUTES%"

endlocal && set "%~2=%ISO_UTC_OFFSET%"
goto :eof

:print_help_prompt
setlocal

echo USAGE:
echo     iso8601_timestamp_provider.bat [OPTION]
echo.
echo DESCRIPTION:
echo     Generates timestamp of a current moment formatted accordingly to ISO 8601 and prints int to std-out.
echo.
echo OPTIONS:
echo     -d, --date
echo         Prints only a current date.
echo     -t, --time
echo         Prints only a current time.
echo     -a, --datetime
echo         Prints both current date and time.
echo     -o, --offset
echo         Prints current UTC offset.
echo     -l, --long
echo         Prints timestamp in log format - includes date, time and UTC offset.
echo     -v, --version
echo         Prints version of the script.
echo     -h, --help
echo         Prints this help prompt.
echo.
echo AUTHOR: Jakub Miodunka
echo VERSION: %VERSION%

endlocal
goto :eof

:main
setlocal enabledelayedexpansion

set "ARG1=%~1"
set "ARG2=%~2"

rem Argument 2 is used only for detecting, if too many arguments were passed to the script.
if "%ARG2%" NEQ "" (call :print_help_prompt & endlocal & goto :eof)

set /a INCLUDE_DATE=0
set /a INCLUDE_TIME=0
set /a INCLUDE_UTC_OFFSET=0

if "%ARG1%" == "" (set "ARG1=--datetime")   & rem Date-time format used as default.

if "%ARG1%" == "--date"     (set /a INCLUDE_DATE=1)
if "%ARG1%" == "-d"         (set /a INCLUDE_DATE=1)
if "%ARG1%" == "--time"     (set /a INCLUDE_TIME=1)
if "%ARG1%" == "-t"         (set /a INCLUDE_TIME=1)
if "%ARG1%" == "--datetime" (set /a INCLUDE_DATE=1 && set /a INCLUDE_TIME=1)
if "%ARG1%" == "-a"         (set /a INCLUDE_DATE=1 && set /a INCLUDE_TIME=1)
if "%ARG1%" == "--offset"   (set /a INCLUDE_UTC_OFFSET=1)
if "%ARG1%" == "-o"         (set /a INCLUDE_UTC_OFFSET=1)
if "%ARG1%" == "--long"     (set /a INCLUDE_DATE=1 && set /a INCLUDE_TIME=1 && set /a INCLUDE_UTC_OFFSET=1)
if "%ARG1%" == "-l"         (set /a INCLUDE_DATE=1 && set /a INCLUDE_TIME=1 && set /a INCLUDE_UTC_OFFSET=1)
if "%ARG1%" == "--help"     (call :print_help_prompt & endlocal & goto :eof)
if "%ARG1%" == "-h"         (call :print_help_prompt & endlocal & goto :eof)
if "%ARG1%" == "--version"  (echo Version: %VERSION% & endlocal & goto :eof)
if "%ARG1%" == "-v"         (echo Version: %VERSION% & endlocal & goto :eof)

rem Detecting invalid configuration.
if "%INCLUDE_DATE%%INCLUDE_TIME%%INCLUDE_UTC_OFFSET%" == "000" (call :print_help_prompt & endlocal & goto :eof)

rem Timestamps generated by the script are based on timestamps provided by WMIC.
for /f "tokens=2 delims==" %%i in ('wmic OS get localdatetime /value') do set "WMIC_TIMESTAMP=%%i"
set "ISO_TIMESTAMP="

if %INCLUDE_DATE% EQU 1 (
    call :get_iso_date "!WMIC_TIMESTAMP!" ISO_DATE
    set "ISO_TIMESTAMP=!ISO_TIMESTAMP!!ISO_DATE!"
)

if %INCLUDE_TIME% EQU 1 (
    if %INCLUDE_DATE% EQU 1 (set "ISO_TIMESTAMP=!ISO_TIMESTAMP!T")
    call :get_iso_time "!WMIC_TIMESTAMP!" ISO_TIME
    set "ISO_TIMESTAMP=!ISO_TIMESTAMP!!ISO_TIME!"
)

if %INCLUDE_UTC_OFFSET% EQU 1 (
    call :get_iso_utc_offset "!WMIC_TIMESTAMP!" ISO_UTC_OFFSET
    set "ISO_TIMESTAMP=!ISO_TIMESTAMP!!ISO_UTC_OFFSET!"
)

echo %ISO_TIMESTAMP%

endlocal
goto :eof

:end
exit /b
